{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u044b\u0435 \u0440\u0430\u0431\u043e\u0442\u044b","text":"<p>\u0417\u0434\u0435\u0441\u044c \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u044b \u043c\u043e\u0438 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u044b\u0435 \u0440\u0430\u0431\u043e\u0442\u044b.</p>"},{"location":"lab1/","title":"\u0420\u0430\u0431\u043e\u0442\u0430 \u0441 \u0441\u043e\u043a\u0435\u0442\u0430\u043c\u0438","text":"<p>\u0426\u0435\u043b\u044c: \u043e\u0432\u043b\u0430\u0434\u0435\u0442\u044c \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u043c\u0438 \u043d\u0430\u0432\u044b\u043a\u0430\u043c\u0438 \u0438 \u0443\u043c\u0435\u043d\u0438\u044f\u043c\u0438 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 web-\u0441\u0435\u0440\u0432\u0435\u0440\u043e\u0432 \u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0441\u043e\u043a\u0435\u0442\u043e\u0432. </p> <p>\u041b\u0435\u043a\u0446\u0438\u044f \u0441 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0438 \u0422\u0435\u043a\u0441\u0442 \u0440\u0430\u0431\u043e\u0442\u044b</p>"},{"location":"lab1/base/","title":"\u0411\u0430\u0437\u043e\u0432\u044b\u0435 \u043a\u043b\u0430\u0441\u0441\u044b","text":"\u0411\u0430\u0437\u043e\u0432\u044b\u0439 \u043a\u043b\u0430\u0441\u0441 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 <p>\u042d\u0442\u043e \u0431\u0430\u0437\u043e\u0432\u044b\u0439 \u043a\u043b\u0430\u0441\u0441 \u0441\u0435\u0440\u0432\u0435\u0440\u0430. \u0414\u0430\u043b\u0435\u0435 \u044f \u0435\u0433\u043e \u043d\u0430\u0441\u043b\u0435\u0434\u0443\u044e \u0432 \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0445 \u0437\u0430\u0434\u0430\u043d\u0438\u044f\u0445 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b, \u0447\u0442\u043e\u0431\u044b \u043f\u0438\u0441\u0430\u0442\u044c \u043c\u0435\u043d\u044c\u0448\u0435 \u043f\u043e\u0432\u0442\u043e\u0440\u044f\u044e\u0449\u0435\u0433\u043e\u0441\u044f \u043a\u043e\u0434\u0430</p> \u0411\u0430\u0437\u043e\u0432\u044b\u0439 \u043a\u043b\u0430\u0441\u0441 \u0421\u0435\u0440\u0432\u0435\u0440\u0430 AbstractServer.py<pre><code>import socket\n\n\nclass AbstractServer:\n    _address_and_port: tuple = (\"127.0.0.1\", 8080)\n    _timeout: float = 0.5\n    _protocol = socket.SOCK_DGRAM\n    _server_socket: socket.socket = None\n\n    def __init__(self) -&gt; None:\n        self._server_socket = socket.socket(socket.AF_INET, self._protocol)\n        self._server_socket.bind(self._address_and_port)\n        self._server_socket.settimeout(self._timeout)\n        print(\"...Server is running...\")\n\n    def _exit(self) -&gt; None:\n        print(\"Server is shutting down...\")\n        self._server_socket.close()\n\n    def _action(self):\n        pass\n\n    def cycle(self) -&gt; None:\n        try:\n\n            while True:\n                try:\n                    self._action()\n\n                except socket.timeout:\n                    pass\n\n        except KeyboardInterrupt:\n            pass\n\n        finally:\n            self._exit()\n</code></pre>"},{"location":"lab1/task1/","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21161","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 <p>\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, server\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0430. \u0421\u0435\u0440\u0432\u0435\u0440 \u0432 \u043e\u0442\u0432\u0435\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, client\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430.</p> <p>\u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 <code>socket</code> \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 UDP</p> \u0421\u0435\u0440\u0432\u0435\u0440\u041a\u043b\u0438\u0435\u043d\u0442 server.py<pre><code>from base_classes.AbstractServer import AbstractServer\n\n\nclass Server1(AbstractServer):\n    def __init__(self) -&gt; None:\n        super().__init__()\n\n    def _action(self) -&gt; None:\n        data, address = self._server_socket.recvfrom(1024)\n        print(f\"Message: {data.decode()}\")\n        self._server_socket.sendto(\"Hello, client\".encode(), address)\n\n\nif __name__ == \"__main__\":\n    server = Server1()\n    server.cycle()\n</code></pre> client.py<pre><code>import socket\n\n\nclient_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n\nclient_socket.sendto(\"Hello, server\".encode(), (\"127.0.0.1\", 8080))\ndata, _ = client_socket.recvfrom(1024)\nprint(f\"Message: {data.decode()}\")\n</code></pre>"},{"location":"lab1/task2/","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21162","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 <p>\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442 \u0443 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b. \u0421\u0435\u0440\u0432\u0435\u0440 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443. \u0412\u0430\u0440\u0438\u0430\u043d\u0442 - \u041f\u043e\u0438\u0441\u043a \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u0442\u0440\u0430\u043f\u0435\u0446\u0438\u0438.</p> <p>\u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 <code>socket</code> \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 TCP</p> \u0421\u0435\u0440\u0432\u0435\u0440\u041a\u043b\u0438\u0435\u043d\u0442 server.py<pre><code>import socket\n\nfrom base_classes.AbstractServer import AbstractServer\n\n\nclass Server2(AbstractServer):\n    _protocol = socket.SOCK_STREAM\n    _connections_number = 5\n\n    def __init__(self):\n        super().__init__()\n        self._server_socket.listen(self._connections_number)\n\n    def _action(self):\n        # \u0432\u0430\u0440 d - \u043f\u043e\u0438\u0441\u043a \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u043f\u043e \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u0438 \u0432\u044b\u0441\u043e\u0442\u0435\n        data, address = self._server_socket.accept()\n\n        print(f\" {address} - \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u043e!\")\n\n        data.send(\"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0447\u0435\u0440\u0435\u0437 \u043f\u0440\u043e\u0431\u0435\u043b \u0441\u0442\u043e\u0440\u043e\u043d\u0443 a \u0432\u044b\u0441\u043e\u0442\u0443 h\".encode())\n\n        users_answer = data.recv(1024).decode()\n\n        a, h = (int(num) for num in users_answer.split())\n\n        area = a * h\n\n        if h &gt; a:\n            data.send(\"\u0412\u044b\u0441\u043e\u0442\u0430 \u043d\u0435 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0431\u043e\u043b\u044c\u0448\u0435 \u0441\u0442\u043e\u0440\u043e\u043d\u044b - \u0432\u0432\u0435\u0434\u0438\u0442\u0435 \u0435\u0449\u0435 \u0440\u0430\u0437\".encode())\n            self.cycle()\n\n        print(f\" \u043e\u0442\u0432\u0435\u0442 {area} \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u0435\u043d \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044e\")\n\n        data.send(f\" S = {area}\".encode())\n\n        print(f\" {address} \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u0440\u0430\u0437\u043e\u0440\u0430\u0432\u0430\u043d\u043e\")\n\n\nif __name__ == \"__main__\":\n    server = Server2()\n    server.cycle()\n</code></pre> client.py<pre><code>import socket\n\n\nclient_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nclient_socket.connect((\"127.0.0.1\", 8080))\n\nquestion = client_socket.recv(1024).decode()\nprint(question)\nuser_input = input()\n\nclient_socket.send(user_input.encode())\nresult = client_socket.recv(1024).decode()\nprint(result)\n\nclient_socket.close()\n</code></pre>"},{"location":"lab1/task3/","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21163","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 <p>\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443. \u0412 \u043e\u0442\u0432\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 http-\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0435 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u0434\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 <code>index.html</code>.</p> <p>\u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 <code>socket</code></p> \u0421\u0435\u0440\u0432\u0435\u0440Html server.py<pre><code>from base_classes.AbstractServer import AbstractServer\nimport socket\nclass Server3(AbstractServer):\n\n    _protocol = socket.SOCK_STREAM\n    _connections_number = 5\n\n    def __init__(self):\n        super().__init__()\n        self._server_socket.listen(self._connections_number)\n\n    def _action(self) -&gt; None:\n        client_socket, address = self._server_socket.accept()\n        with open(\"index.html\", encoding=\"utf-8\") as f:\n            index_html = f.read().encode()\n        content_length = len(index_html)\n        headers = (\n            \"HTTP/1.1 200 OK\\n\"\n            \"Content-Type: text/html\\n\"\n            f\"Content-Length: {content_length}\\n\"\n            \"Connection: close\\n\\n\"\n        ).encode()\n        response = headers + index_html\n        client_socket.sendall(response)\n\n\nif __name__ == \"__main__\":\n    server = Server3()\n    server.cycle()\n</code></pre> index.html<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"ru\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;This is task 3&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\nThis is task3\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"lab1/task4/","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21164","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 <p>\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u0432\u0443\u0445\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0438\u043b\u0438 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442. \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0447\u0430\u0442\u0430 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0431\u0430\u043b\u043b\u043e\u0432.</p> <p>\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 TCP \u2013 100% \u0431\u0430\u043b\u043b\u043e\u0432, \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e UDP \u2013 80%. \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 <code>threading</code>.</p> <p>\u0414\u043b\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e UDP, <code>threading</code> \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430. \u0414\u043b\u044f \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0441 TCP \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0438\u0435 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u0418 \u043f\u0440\u0438\u0435\u043c \u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0432\u0441\u0435\u043c \u044e\u0437\u0435\u0440\u0430\u043c \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0435 \u0432 \u043f\u043e\u0442\u043e\u043a\u0430\u0445. \u041d\u0435 \u0437\u0430\u0431\u0443\u0434\u044c\u0442\u0435 \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c \u044e\u0437\u0435\u0440\u043e\u0432, \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u0442\u043e\u043c \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u0438\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f.</p> \u0421\u0435\u0440\u0432\u0435\u0440\u041f\u043e\u0442\u043e\u043a\u041a\u043b\u0438\u0435\u043d\u0442\u0430\u041a\u043b\u0438\u0435\u043d\u0442 server.py<pre><code>import socket\nimport sys\nfrom client_thread import ClientThread\n\nclass Server:\n    _address_and_port: tuple = (\"127.0.0.1\", 8080)\n\n    _server_socket: socket.socket = None\n\n    _timeout: int = 1\n\n    _number_of_concurrent_connections: int = 10\n\n    _clients: list[ClientThread]\n\n    # init ------------------------------------------------------------------\n\n    def __init__(self) -&gt; None:\n        self._clients = []\n        self._set_up_server()\n        print(\"Server is running...\")\n\n    # setup ------------------------------------------------------------------\n    def _set_up_server(self) -&gt; None:\n        self._server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self._server_socket.bind(self._address_and_port)\n        self._server_socket.settimeout(self._timeout)\n        self._server_socket.listen(self._number_of_concurrent_connections)\n\n    # main cycle ------------------------------------------------------------------\n    def start_cycle(self) -&gt; None:\n        try:\n            while True:\n                print(\"try to connect client\")\n                self._try_to_get_new_client_connection()\n\n        finally:\n            self.exit()\n\n    def _try_to_get_new_client_connection(self) -&gt; None:\n        try:\n            client_sock, address = self._server_socket.accept()\n            client = ClientThread(self, client_sock, address)\n            self._clients.append(client)\n            client.start_receiving_messages()\n\n        except socket.timeout:\n            pass\n\n    # Exiting ------------------------------------------------------------------\n    def client_disconnected(self, client: ClientThread) -&gt; None:\n        print(f'{client.address} \u043f\u043e\u043b\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u043f\u043e\u043a\u0438\u043d\u0443\u043b \u0447\u0430\u0442 ')\n        self._clients.remove(client)\n\n    def exit(self) -&gt; None:\n        self.broadcast_message(\"...Server is shutting down...\")\n        self._abort_clients_reciving_messages()\n        self._server_socket.close()\n        print(\"...Server is shutting down...\")\n        sys.exit(0)\n\n    def _abort_clients_reciving_messages(self) -&gt; None:\n        for client in self._clients:\n            client.stop_receiving_messages()\n\n    # broadcasting ------------------------------------------------------------------\n    def broadcast_message(self, message: str) -&gt; None:\n        for client in self._clients:\n            try:\n                client.send_message_to_client(message)\n\n            except:\n                pass\n\n\nif __name__ == \"__main__\":\n    server = Server()\n    server.start_cycle()\n</code></pre> client_thread.py<pre><code>import threading\nimport socket\n\n\nclass ClientThread:\n    _server: \"Server\"\n\n    _client_socket: socket.socket\n\n    address: tuple\n\n    _thread: threading.Thread\n\n    _is_running: bool = True\n\n    # init ------------------------------------------------------------------\n\n    def __init__(self, server, client_socket: socket.socket, address: tuple) -&gt; None:\n        self._server = server\n        self._client_socket = client_socket\n        self.address = address\n\n    # Sending and reciving -------------------------------------------------------------\n    def send_message_to_client(self, message: str) -&gt; None:\n        self._client_socket.send(message.encode())\n\n    def start_receiving_messages(self) -&gt; None:\n        self._thread = threading.Thread(target=self._run)\n        self._thread.start()\n\n    # running in Thread ------------------------------------------------------------------\n    def _run(self) -&gt; None:\n        self._broadcast(\"\u043f\u0440\u0438\u0441\u043e\u0435\u0434\u0438\u043d\u0438\u043b\u0441\u044f \u043a \u0447\u0430\u0442\u0443\")\n\n        try:\n            while True:\n                if not self._is_running:\n                    break\n\n                self._try_receiving_and_broadcasting_message_from_remote_client()\n\n        except:\n            pass\n\n        finally:\n            self._shot_down_self_gracefully()\n\n    def _try_receiving_and_broadcasting_message_from_remote_client(self) -&gt; None:\n        try:\n            message = self._try_receiving_new_message()\n\n            if not message:\n                self._shot_down_self_gracefully()\n                return\n            else:\n                self._broadcast(message)\n\n        except socket.timeout:\n            pass\n\n    def _try_receiving_new_message(self) -&gt; str:\n        return self._client_socket.recv(1024).decode()\n\n    # broadcasting ------------------------------------------------------------------\n    def _broadcast(self, message: str) -&gt; None:\n        formatted_message = f\"{self.address[0]}:{self.address[1]}: {message}\"\n        self._server.broadcast_message(formatted_message)\n\n    # Exiting ------------------------------------------------------------------\n    def _shot_down_self_gracefully(self):\n        if not self._is_running:\n            return\n\n        self._broadcast(\"\u041f\u043e\u043a\u0438\u043d\u0443\u043b \u0447\u0430\u0442\")\n        self.stop_receiving_messages()\n        self._server.client_disconnected(self)\n\n    def stop_receiving_messages(self) -&gt; None:\n        self._client_socket.close()\n        self._is_running = False\n</code></pre> client.py<pre><code>import socket\nimport sys\nimport threading\n\n\nclass Client:\n    _address_and_port: tuple = (\"127.0.0.1\", 8080)\n\n    _client_socket: socket.socket = None\n\n    _server_closed: bool = False\n\n    _timeout: int = 1\n\n    _name: str\n\n    # init ------------------------------------------------------------------\n\n    def __init__(self) -&gt; None:\n        print(\"\u0432\u0432\u0435\u0434\u0438\u0442\u0435 \u0438\u043c\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\")\n        try:\n            name = input()\n            self._name = name\n\n        except:\n            sys.exit(0)\n\n    # Connecting and reciving ------------------------------------------------------------------\n    def connect_to_chat(self) -&gt; None:\n        self._setup_client_socket()\n        self._start_listening_for_input_in_background()\n\n        print(\"...Client is running...\")\n\n        try:\n            while True:\n                if self._server_closed:\n                    break\n\n                self._try_getting_message_from_server()\n\n        except KeyboardInterrupt:\n            pass\n\n        finally:\n            self._exit()\n\n    def _try_getting_message_from_server(self) -&gt; None:\n        try:\n            message = self._client_socket.recv(1024)\n\n            if not message:\n                print(\"\u0421\u0435\u0440\u0432\u0435\u0440 \u0437\u0430\u043a\u0440\u044b\u043b \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435!\")\n                self._server_closed = True\n\n            print(message.decode())\n\n        except socket.timeout:\n            pass\n\n    # Exiting ------------------------------------------------------------------\n    def _setup_client_socket(self) -&gt; None:\n        self._client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self._client_socket.connect(self._address_and_port)\n        self._client_socket.settimeout(self._timeout)\n\n    def _exit(self) -&gt; None:\n        self._server_closed = True\n        print(\"Exiting chat...\")\n        self._client_socket.close()\n        sys.exit(0)\n\n    # Listening ------------------------------------------------------------------\n    def _start_listening_for_input_in_background(self) -&gt; None:\n        thread = threading.Thread(target=self._listen_for_input)\n        thread.daemon = True\n        thread.start()\n\n    def _listen_for_input(self) -&gt; None:\n        try:\n            while True:\n                user_input = input()\n                self._send_message_to_chat(f'&lt;{self._name}&gt; : {user_input}')\n\n        except:\n            pass\n\n    # Send_message ------------------------------------------------------------------\n    def _send_message_to_chat(self, message: str) -&gt; None:\n        self._client_socket.sendall(message.encode())\n\n\nif __name__ == \"__main__\":\n    client = Client()\n    client.connect_to_chat()\n</code></pre>"},{"location":"lab1/task5/","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21165","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 <p>\u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u043e\u0439 web-\u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 GET \u0438 POST http \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Python \u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 socket.</p> <p>\u0411\u0430\u0437\u043e\u0432\u044b\u0439 \u043a\u043b\u0430\u0441\u0441 \u0434\u043b\u044f \u043f\u0440\u043e\u0441\u0442\u0435\u0439\u0448\u0435\u0439 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 web-\u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0434\u043e\u0441\u0442\u0443\u043f\u0435\u043d \u043f\u043e  \u0441\u0441\u044b\u043b\u043a\u0435.</p> <p>\u0417\u0430\u0434\u0430\u043d\u0438\u0435: \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043c\u043e\u0436\u0435\u0442:</p> <ul> <li>\u041f\u0440\u0438\u043d\u044f\u0442\u044c \u0438 \u0437\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0438 \u043e\u0446\u0435\u043d\u043a\u0435 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435.</li> <li>\u041e\u0442\u0434\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431\u043e \u0432\u0441\u0435\u0445 \u043e\u0446\u0435\u043d\u0430\u0445 \u043f\u043e \u0434\u0441\u0438\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0432 \u0432\u0438\u0434\u0435 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b.</li> </ul> \u0421\u0435\u0440\u0432\u0435\u0440HtmlHtml server.py<pre><code>import socket\nimport json\nimport sys\nfrom collections import defaultdict\nfrom typing import Any, Dict\n\n\nclass MyHTTPServer:\n    _timeout: int = 1\n\n    _server_socket: socket.socket = None\n\n    _max_connections: int = 10\n\n    _data: defaultdict[str, list[str]]\n\n    _server_host: str\n\n    _server_port: int\n\n    _line_break: str = \"\\r\\n\"\n\n    # init ------------------------------------------------------------------\n\n    def __init__(self, host: str, port: int) -&gt; None:\n        self._data = defaultdict(list)\n        self._server_host = host\n        self._server_port = port\n        self._serve_forever()\n        print(\"...Server is running...\")\n\n    # setup ------------------------------------------------------------------\n    def _serve_forever(self) -&gt; None:\n        self._server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self._server_socket.bind((self._server_host, self._server_port))\n        self._server_socket.listen(self._max_connections)\n        self._server_socket.settimeout(self._timeout)\n\n    # serve ------------------------------------------------------------------\n    def serve(self) -&gt; None:\n        try:\n            while True:\n                try:\n                    socket_connection, _ = self._server_socket.accept()\n                    socket_connection.settimeout(self._timeout)\n\n                    try:\n                        self._serve_client(socket_connection)\n\n                    finally:\n                        socket_connection.close()\n\n                except (socket.timeout, socket.error):\n                    pass\n\n        finally:\n            self._exit()\n\n    # client ------------------------------------------------------------------\n    def _serve_client(self, conn: socket.socket) -&gt; None:\n        request = conn.recv(1024).decode()\n\n        if not request:\n            return\n\n        method, path, _ = self._parse_request(request)\n\n        if path != \"/\":\n            html_file = self._load_html_file(\"not_found.html\")\n            self._send_response(conn, html_file, status_code=\"404 Not Found\")\n\n        elif method == \"GET\":\n            self._handle_get_request(conn)\n\n        elif method == \"POST\":\n            body = self._parse_body(request)\n            self._handle_post_request(body, conn)\n\n    # handle ------------------------------------------------------------------\n    def _handle_get_request(self, conn: socket.socket) -&gt; None:\n        data_pairs = [f\"{discipline}: {', '.join(grades)}\" for discipline, grades in self._data.items()]\n        formatted_scores = \"&lt;br&gt;\".join(data_pairs)\n        placeholder = \"###PLACEHOLDER###\"\n        html_file = self._load_html_file(\"index.html\")\n        processed_html_file = html_file.replace(placeholder, formatted_scores)\n        self._send_response(conn, processed_html_file)\n\n    def _handle_post_request(self, body: dict, conn: socket.socket) -&gt; None:\n        discipline = body.get(\"discipline\", \"\")\n        grade = body.get(\"grade\", \"\")\n        self._data[discipline].append(grade)\n        self._send_response(conn)\n\n    # parse  ------------------------------------------------------------------\n\n    @staticmethod\n    def _parse_body(request: str) -&gt; dict[Any, Any] | Any:\n        lines = request.split(\"\\r\\n\")\n        i = lines.index(\"\")\n\n        if len(lines) &gt; i + 1:\n            body = \"\\r\\n\".join(lines[i + 1:])\n            return json.loads(body)\n\n        return {}\n\n    @staticmethod\n    def _parse_request(request: str) -&gt; tuple[str, str, str]:\n        lines = request.split(\"\\r\\n\")\n        method, path, version = lines[0].split(\" \")\n        return method, path, version\n\n    # load ------------------------------------------------------------------\n    @staticmethod\n    def _load_html_file(file_name: str) -&gt; str:\n        with open(file_name, encoding=\"utf-8\") as f:\n            html_file = f.read()\n\n        return html_file\n\n    def _serializer_headers(self, headers: dict[str, str]) -&gt; str:\n        pairs = [f\"{name}: {value}{self._line_break}\" for name, value in headers.items()]\n        return \"\".join(pairs)\n\n    def _send_response(self, conn: socket.socket, response: str = \"\", status_code: str = \"200 OK\") -&gt; None:\n        response_headers = {\n            \"Content-Type\": \"text/html; charset=utf-8\",\n            \"Connection\": \"close\",\n        }\n        response_headers_raw = self._serializer_headers(response_headers)\n        protocol_version = \"HTTP/1.1\"\n        header = f\"{protocol_version} {status_code}\"\n        raw_response = header + self._line_break + response_headers_raw + self._line_break + response\n        conn.sendall(raw_response.encode(\"utf-8\"))\n\n    # exit ------------------------------------------------------------------\n    def _exit(self) -&gt; None:\n        print(\"..Server is shutting down...\")\n        self._server_socket.close()\n        sys.exit(0)\n\n\nif __name__ == \"__main__\":\n    host = \"127.0.0.1\"\n    port = 8080\n    serv = MyHTTPServer(host, port)\n    serv.serve()\n</code></pre> index.html<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"ru\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;\u0416\u0443\u0440\u043d\u0430\u043b \u043e\u0446\u0435\u043d\u043e\u043a&lt;/title&gt;\n    &lt;style&gt;\n        body {\n            font-family: Arial, sans-serif;\n            background-color: #f4f4f4;\n            margin: 0;\n            padding: 20px;\n            text-align: center;\n        }\n\n        .container {\n            max-width: 600px;\n            margin: auto;\n        }\n\n        form {\n            background-color: white;\n            padding: 20px;\n            border-radius: 8px;\n            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n            margin-bottom: 20px;\n        }\n\n        input[type=\"text\"], input[type=\"number\"] {\n            padding: 10px;\n            margin: 10px 0;\n            border: 1px solid #ddd;\n            border-radius: 4px;\n            width: calc(100% - 22px);\n        }\n\n        button {\n            background-color: #007bff;\n            color: white;\n            padding: 10px 15px;\n            border: none;\n            border-radius: 4px;\n            cursor: pointer;\n        }\n\n        button:hover {\n            background-color: #0056b3;\n        }\n\n        .marks {\n            background-color: white;\n            padding: 20px;\n            border-radius: 8px;\n            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n        }\n    &lt;/style&gt;\n    &lt;script&gt;\n        function sendPostRequest(event) {\n            event.preventDefault();\n\n            const discipline = document.getElementById('discipline').value;\n            const grade = document.getElementById('grade').value;\n\n            fetch('/', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({ discipline: discipline, grade: grade }),\n            })\n            .then(() =&gt; location.reload())\n        }\n    &lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=\"container\"&gt;\n        &lt;form onsubmit=\"sendPostRequest(event)\"&gt;\n            &lt;input type=\"text\" id=\"discipline\" name=\"discipline\" placeholder=\"\u0414\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430\" required&gt;\n            &lt;input type=\"number\" id=\"grade\" name=\"grade\" min=\"1\" max=\"5\" placeholder=\"\u041e\u0446\u0435\u043d\u043a\u0430\" required&gt;\n            &lt;button type=\"submit\"&gt;\u041e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c&lt;/button&gt;\n        &lt;/form&gt;\n        &lt;div class=\"marks\"&gt;\n            ###PLACEHOLDER###\n        &lt;/div&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> not_found.html<pre><code>\n</code></pre>"}]}